* ob-aider.el [[https://melpa.org/#/ob-aider][file:https://melpa.org/packages/ob-aider-badge.svg]]

An Org Babel library for sending prompts to an already running Aider.el or Aidermacs buffer directly from Org mode source blocks.

** Overview

=ob-aider.el= allows you to interact with [[https://github.com/tninja/aider.el][aider.el]] or [[https://github.com/localredhead/aidermacs][Aidermacs]] directly from Org mode documents. This enables you to:

- Document your AI-assisted coding sessions in Org mode
- Send prompts to Aider from within your Org documents
- Create reproducible AI-assisted coding workflows
- Utilize GPtel to write prompts to send to Aider.

[[file:./screengif.gif]]

** Requirements

- Emacs 27.1 or later
- Org mode 9.4 or later
- One of the following:
  - [[https://github.com/tninja/aider.el][aider.el]]
  - [[https://github.com/localredhead/aidermacs][Aidermacs]]
- For Aidermacs vterm support: [[https://github.com/akermu/emacs-libvterm][vterm]]

** Installation

*** Manual Installation

1. Clone this repository:
   #+begin_src bash
   git clone https://github.com/localredhead/ob-aider.el.git
   #+end_src

2. Add the following to your Emacs configuration:
   #+begin_src elisp
   (add-to-list 'load-path "/path/to/ob-aider")
   (require 'ob-aider)
   
   ;; Enable aider in org-babel
   (with-eval-after-load 'org
     (org-babel-do-load-languages
      'org-babel-load-languages
      (append org-babel-load-languages
              '((aider . t)))))
   #+end_src

*** Using straight.el and use-package

#+begin_src elisp
(use-package ob-aider
  :straight (:host github :repo "localredhead/ob-aider.el")
  :after org
  :config
  (org-babel-do-load-languages
   'org-babel-load-languages
   (append org-babel-load-languages
           '((aider . t)))))
#+end_src

*** For Doom Emacs users

In your =~/.doom.d/packages.el= file, add:

If using melpa:
#+begin_src elisp
(package! ob-aider)
#+end_src

Or directly from GH:
#+begin_src elisp
(package! ob-aider
  :recipe (:host github :repo "localredhead/ob-aider.el"))
#+end_src

Then in your =~/.doom.d/config.el= file, add:
#+begin_src elisp
(use-package! ob-aider
  :after org
  :config
  (add-to-list 'org-babel-load-languages '(aider . t))
  (org-babel-do-load-languages 'org-babel-load-languages org-babel-load-languages))
#+end_src

Then run =doom sync= to install the package.

** Usage

1. Start an Aider session using =M-x aider-start= or an Aidermacs session using =M-x aidermacs=.

2. In your Org document, create an Aider source block:

   #+begin_example
   #+begin_src aider
   Please refactor this function to be more efficient...
   #+end_src
   #+end_example

3. Execute the block with =C-c C-c= to send the prompt to the active Aider session.

4. The prompt will be sent to the Aider or Aidermacs buffer. Check that buffer for the response.

** Troubleshooting

- *No active Aider or Aidermacs conversation buffer found*: Make sure you have started an Aider or Aidermacs session before executing an Aider source block.

** Use Cases

*** GPTel + ob-aider: A Powerful Combination

One of the most powerful workflows enabled by =ob-aider= is the combination with [[https://github.com/karthink/gptel][GPTel]] or similar Emacs LLM interfaces. This creates a seamless AI-assisted development environment:

**** Integrated AI Workflow

The combination of GPTel and ob-aider creates a synergistic workflow where:

- *GPTel* helps you craft and refine prompts within your Org document
- *ob-aider* sends those refined prompts to your Aider session for code generation and modification
- *Org mode* documents the entire process in a single, executable document

This workflow allows you to leverage different AI tools for their respective strengths - using a general-purpose LLM to help formulate effective prompts for the code-focused Aider tool. The entire conversation history, thought process, and resulting code changes are preserved in a single Org document that can be shared, revisited, or modified later.

This integration transforms your Org documents into interactive AI-assisted development environments, where you can seamlessly move between brainstorming, prompt refinement, code generation, and documentation - all while maintaining a complete record of your development process.

** Credits and Thanks

This project would not be possible without the following amazing tools:

- [[https://github.com/karthink/gptel][GPTel]] - An elegant and efficient Emacs interface to OpenAI's GPT and other LLMs
- [[https://github.com/tninja/aider.el][Aider.el]] - Emacs interface for Aider, the AI pair programming tool
- [[https://orgmode.org/][Org Mode]] - For its incredible Babel framework that makes this integration possible

Special thanks to the developers of these tools for their contributions to the Emacs ecosystem and for making AI-assisted development more accessible within our favorite editor.

** Acknowledgments

- [[https://github.com/tninja/aider.el][aider.el]] for the Aider Emacs integration
- [[https://orgmode.org/worg/org-contrib/babel/][Org Babel]] for the literate programming framework
- This project was 100% developed with the assistance of Claude 3 Opus and Claude 3 Sonnet, demonstrating the potential of AI-assisted development
- The entire project was developed using [[https://github.com/karthink/gptel][GPTel]] to write prompts and [[https://github.com/tninja/aider.el][Aider.el]], showcasing the power of AI pair programming
